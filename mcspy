#!/bin/bash
# Memcache data analyzer that understands Drupal and mcrouter.
set +x

# Constants
# See http://linuxtidbits.wordpress.com/2008/08/11/output-color-on-bash-scripts/
COLOR_BLACK=$(tput setaf 0) #"\[\033[0;31m\]"
COLOR_RED=$(tput setaf 1) #"\[\033[0;31m\]"
COLOR_YELLOW=$(tput setaf 3) #"\[\033[0;33m\]"
COLOR_GREEN=$(tput setaf 2) #"\[\033[0;32m\]"
COLOR_GRAY=$(tput setaf 7) #"\[\033[2;37m\]"
COLOR_NONE=$(tput sgr0) #"\[\033[0m\]"
COLOR_BACKGROUND_NONE=$(tput setab 0)
COLOR_BACKGROUND_RED=$(tput setab 1)
COLOR_BACKGROUND_GREEN=$(tput setab 2)
COLOR_BACKGROUND_YELLOW=$(tput setab 3)
COLOR_BACKGROUND_WHITE=$(tput setab 7)

SCRIPT_FOLDER="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $SCRIPT_FOLDER

default_dump_folder="/tmp/mcspy-dump"

function cleanup() {
  output "Cleaning up temporary files"
  rm 2>/dev/null $tmp_parsed_prefix $tmp_stats
}

function header() {
  echo ""
  echo "${COLOR_GRAY}._____________________________________________________________________________"
  echo "|${COLOR_GREEN}  $1"
  echo "${COLOR_NONE}"
}

function show_crosstab() {
  input_file=$1
  colfield=$2
  rowfield=$3
  header_cols=$4
  header_rows=$5

  method=count
  if [ ${6:-x} != x ]
  then
    method=sum
    sum_field="${6:-x}"
  fi
  if [ ${7:-x} != x ]
  then
    totals_exclude="${7:-x}"
  fi

  header "Crosstab: number of items by $header_cols/$header_rows"
  #echo "-------------------------------------------------------------${COLOR_NONE}"
  (cat $input_file |awk -v sum_field=$sum_field -v method=${method} -v colfield=$colfield -v rowfield=$rowfield -v header_cols="$header_cols" -v header_rows="$header_rows" -v totals_exclude=",$totals_exclude," '
  function track(col,row,val) {
    #print col row val;
    cols[col]=col;
    rows[row]=row;
    tot[col,row]+=val;
    tot_col[col]+=val;
    tot_row[row]+=val
    grand_total+=val;
  }
  function should_exclude_from_totals(name) {
    return (index(totals_exclude, sprintf(",%s,", name)) > 0)
  }
  BEGIN {
    printf ".\t"
    if (!should_exclude_from_totals("_ROW_")) {
      printf ".\t"
    }
    print header_cols "→"; }
  {
    # Track
    val=1;
    if (method=="sum") {
      val=$sum_field;
    }
    track($colfield,$rowfield,val);
  }
  END {
    row_num=asort(rows)
    col_num=asort(cols)

    #### Header row
    printf("↓%s",header_rows);

    # Total column
    if (!should_exclude_from_totals("_ROW_")) {
      printf "\tTOTAL";
    }

    # Rest of columns
    for(col_i=1;col_i<=col_num;col_i++) {
      printf("\t%s", cols[col_i]);
    }
    printf("\n");

    # Print divider below header row
    sep="----";
    printf("%s", sep)
    if (!should_exclude_from_totals("_ROW_")) {
      printf("\t%s", sep);
    }
    for(col_i=1;col_i<=col_num;col_i++) {
      printf("\t%s",sep);
    }
    printf("\n");
    #### END header row

    #### TOTALS row
    printf "TOTAL"

    if (!should_exclude_from_totals("_ROW_")) {
      printf "\t" grand_total;
    }
    for(col_i=1;col_i<=col_num;col_i++) {
      val = "-";
      # If column not excluded from totals
      if (should_exclude_from_totals(cols[col_i]) == 0 ) {
        val = tot_col[cols[col_i]];
      }
      printf("\t%s", val);
    }
    printf "\n";
    #### END TOTALS row

    #### ALL rows
    for(row_i=1;row_i<=row_num;row_i++) {
      row=rows[row_i]
      # Label
      printf("%s", row);

      # Totals column
      if (!should_exclude_from_totals("_ROW_")) {
        printf "\t" tot_row[row];
      }

      # Each column
      #for(col in cols) {
      for(col_i=1;col_i<=col_num;col_i++) {
        col=cols[col_i]
        t=tot[col,row];
        if (!t) { t="-"; }
        printf("\t%s", t);
      }
      printf "\n";
    }

  }') |column -t
  echo ""
}

function show_warn() {
  if [ $FLAG_QUIET -eq 0 ]
  then
    echo "${COLOR_YELLOW}$1${COLOR_NONE}"
  fi
}
function show_error() {
  echo "${COLOR_RED}$1${COLOR_NONE}"
}

function verbose() {
  if [ $FLAG_QUIET -eq 0 -a $FLAG_VERBOSE -eq 1 ]
  then
    echo "${COLOR_GRAY}$1${COLOR_NONE}" 1>&2
  fi
}

function output() {
  if [ $FLAG_QUIET -eq 0 ]
  then
    echo "${COLOR_GRAY}$1${COLOR_NONE}" 1>&2
  fi
}

function showhelp() {
  cat <<EOF
${COLOR_GRAY}Inspects memcache usage by Drupal.

Usage: $0 command [arguments/flags]

Commands:
 report:drupal              Count items per slab and per Drupal multisite (memcache_key_prefix). Alias: report
 report:stats [keypattern]  Report memcache slab/item statistics. Alias: stats
 report:realtime            Realtime list of slab statistics (memcache-tool-ng). Alias: realtime | rt
 dump:keys [keypattern]     Dump memcache keys. Alias: keys
 dump:files                 Dump the memcache items, each into a single file, onto the output folder (see --dump-folder)
 item:get {key}             Fetches and dumps a single item from memcache. Aliases: item | get
 item:delete {key}          Deletes item from all memcache servers. Aliases: del | delete
 deep-search {string}       Scans all memcache items searching for 'string'. Alias: deep

Optional arguments:
--dump-folder=[file]      Specify the dump folder path. Default: $default_dump_folder
--key-grep=[pattern]      Only report on cache IDs that match the searchstring. Default: '.' (match all)
--servers=[serverlist]    Specify the memcache servers. Format: host:port[,host:port[,...]]. Default value:  localhost:11211
--raw                     Only when --list-keys is used, don't parse keys.
--no-refresh              Re-uses cached list of keys between invocations (can be defined by --dump-folder).
                          Alias: --cached

Examples:
  $0 dump:keys --servers=1.0.0.1:11211,1.0.0.2:11211${COLOR_NONE}
EOF
}

function mcrouter_get_servers() {
  printf "get __mcrouter__.preprocessed_config\nquit\n" | nc -v -w1 -q1 "localhost" "11211" 2>&1 2>/dev/null |grep 11211 |cut -f2 -d'"' |cut -f1,2 -d: | paste -s -d' '
}

function memcache_server_split_host_port() {
  memcache_server_host=`echo $1 |cut -f1 -d:`
  memcache_server_port=`echo $1 |cut -f2 -d:`
}

# Parse all items
# Example output in $tmp_parsed:
# { ... snip ... }
# 10	local.test.sede.sede	config	core.entity_view_mode.config_pages.token
# 10	local.test.sede.sede	config	paragraphs.paragraphs_type.price_category
# 11	local.test.sede.sede	config	core.base_field_override.media.file.path
# 11	local.test.sede.sede	config	field.storage.node.field_show_hotline_visible
# { ... snip ... }
function parse_dump() {
  # 2 formats:
  #  (A) SLAB=7 ITEM alejandrotest%3Aconfig%3A-core.base_field_override.comment.comment.mail [227 b; 1541892267 s]
  #  (B) SLAB=2 ITEM hercampus_-cache_menu-.wildcard-admin_menu%3A821856%3A [1 b; 0 s]
  #
  regex="^."
  if [ $FLAG_SLAB != 0 ]
  then
    regex="^SLAB=$FLAG_SLAB "
  fi
  grep="$ARG_KEY_GREP"
  if [ "${grep:-.}" = . -a "${EXTRA_ARG:-x}" != x ]
  then
    grep="$EXTRA_ARG"
  fi

  grep "$regex" $1 | grep "$grep" | awk -F ' ' '
  {
    slab=substr($1,index($1,"=")+1,2);
    piece=substr($3,1, index($3,"-"));
    pos_colon=index(piece, ":")
    pos_3a=index(piece, "%3A");
    if (pos_colon == 0 && pos_3a>0) {
      pos1=index($3, "%3A"); prefix=substr($3,1,pos1-2);
      tmp=substr($3,pos1+3); pos2=index(tmp, "%3A"); bin=substr(tmp, 1, pos2-1);
      item=substr(tmp, pos2+4);
    }
    else {
      pos1=index($3, "-"); prefix=substr($3,1,pos1-1);
      tmp=substr($3,pos1+1); pos2=index(tmp, "-"); bin=substr(tmp, 1, pos2-1);
      item=substr(tmp, pos2+1);
    }
    if (prefix != "" && bin != "") {
      print slab "\t" prefix "\t" bin "\t" item
    }
  }'
}


### MAIN ################################################

# Defaults
FLAG_LIST_KEYS=0
FLAG_RAW=0
DUMP_FILE=""
EXTRA_ARG=""
ARG_KEY_GREP="."
FLAG_REFRESH=1
FLAG_QUIET=0
FLAG_SLAB=0
FLAG_YES=0
FLAG_WATCH=0
FLAG_MCROUTER=0
COMMAND=""
FLAG_NEED_PARSING=1
FLAG_VERBOSE=0
ok=1
DUMP_FOLDER=$default_dump_folder

# Get options
# http://stackoverflow.com/questions/402377/using-getopts-in-bash-shell-script-to-get-long-and-short-command-line-options/7680682#7680682
while test $# -gt 0
do
  case $1 in

  # Normal option processing
    help | -h | --help)
      # usage and help
      showhelp
      exit
      ;;
    -v | -vvv | --verbose)
      FLAG_VERBOSE=1
      ;;
  # ...

  # Special cases
    --)
      break
      ;;
    deep-search | deep-scan | deep)
      COMMAND=deep-search
      ;;
    report:config | report:settings | config | settings)
      COMMAND=report:config
      ;;
    report:drupal | report | analyze | patterns)
      COMMAND=report:drupal
      ;;
    report:stats | stats)
      COMMAND=report:stats
      ;;
    report:realtime | realtime | rt)
      COMMAND=report:realtime
      ;;
    dump:files | backup)
      COMMAND=dump:files
      ;;
    dump:keys | keys | name)
      COMMAND=dump:keys
      ;;
    item:get | item | get)
      COMMAND=item:get
      ;;
    item:delete | del | delete)
      COMMAND=item:delete
      ;;
    --dump-folder=*)
      DUMP_FOLDER=`echo "$1" |cut -f2 -d=`
      ;;
    --dump-file=*)
      DUMP_FILE=`echo "$1" |cut -f2 -d=`
      ;;
    --slab=*)
      FLAG_SLAB=`echo "$1" |cut -f2 -d=`
      ;;
    --key-grep=* | --key-search=* | --keygrep=* | --keysearch=*)
      ARG_KEY_GREP=`echo "$1" |cut -f2 -d=`
      ;;
    --servers=* | --server=*)
      MEMCACHE_SERVER=`echo "$1" |cut -f2 -d= | tr -s ',' ' '`
      ;;
    --refresh | --cleanup)
      FLAG_REFRESH=1
      ;;
    --no-refresh | --cached)
      FLAG_REFRESH=0
      ;;
    --watch | -w)
      FLAG_WATCH=1
      ;;
    --quiet | -s | -q)
      FLAG_QUIET=1
      ;;
    --raw )
      FLAG_RAW=1
      ;;
    --yes | -y )
      FLAG_YES=1
      ;;
    --*)
      # error unknown (long) option $1
      show_error "Unknown option $1"
      ok=0
      ;;
    -?)
      # error unknown (short) option $1
      show_error "Unknown option $1"
      ok=0
      ;;

  # Split apart combined short options
  #  -*)
  #    split=$1
  #    shift
  #    set -- $(echo "$split" | cut -c 2- | sed 's/./-& /g') "$@"
  #    continue
  #    ;;

  # Done with options
    #Catchall
    *)
      EXTRA_ARG="$1"
      ;;
  esac

  shift
done

if [ $ok -eq 0 ]
then
  exit 1
fi

if [ "${COMMAND:-x}" = x ]
then
  show_warn "No command given."
  showhelp
  exit 0
fi

# Determine the memcache server
memcache_servers=""
if [ "${MEMCACHE_SERVER:-x}" = "x" ]
then
  #DEFAULTS.
  memcache_servers=`php -r '
    $file="/var/www/site-php/" . getenv("AH_SITE_NAME") . "/config.json";
    if (file_exists($file)) {
      $data = json_decode(file_get_contents($file), TRUE); $servers = implode(" ", array_values($data["memcached_servers"])); echo $servers . PHP_EOL;
    } else {
      echo "localhost:11211" . PHP_EOL;
    }
    '`
  if [ "$memcache_servers" != "localhost:11211" ]
  then
    output "Detected memcache servers from /var/www/site-php/${AH_SITE_NAME}/config.json"
  else
    if [ `echo "$memcache_servers" | grep -c '.svc.cluster.local'` -gt 0 ]
    then
      hostname=`echo $memcache_servers |cut -f1 -d:`
      memcache_servers=`dig +short $hostname |awk '{ print $0 ":11211" }'`
      output "Detected memcache servers from memcached.\$AH_SITE_NAME.svc.cluster.local DNS entry"
    fi
  fi
else
  # Validate format
  if [ `echo "$MEMCACHE_SERVER" | egrep -c '^[1-9][0-9]*\.[0-9]*\.[0-9]*\.[0-9]*:[0-9][0-9][0-9]*( [0-9\.\:]*|)$'` -eq 0 ]
  then
    show_error "ERROR: Bad memcache server list \"$MEMCACHE_SERVER\"."
    exit 1
  fi
  memcache_servers=$MEMCACHE_SERVER
fi

# Using mcrouter?
if [ `echo $memcache_servers |grep -c ,` -eq 0 -a `mcrouter_get_servers | grep -c .` -gt 0 ]
then
  FLAG_MCROUTER=1
  mcrouter_server="$memcache_servers"
  memcache_servers=`mcrouter_get_servers`
  output "Detected mcrouter at localhost:11211, available memcache instances: $memcache_servers"
fi

output "Using memcache server list: $memcache_servers"

if [ ! -r $DUMP_FOLDER ]
then
  mkdir $DUMP_FOLDER 2>/dev/null
  if [ $? -gt 0 ]
  then
    show_error "ERROR: Can't create $DUMP_FOLDER"
    exit 1
  fi
fi

tmp_dump="$DUMP_FOLDER/memcache-key-dump-raw.txt"
tmp_parsed="$DUMP_FOLDER/memcache-key-dump-parsed.txt"
tmp_parsed_prefix="$DUMP_FOLDER/memcache-key-dump-parsed-prefix.txt"
tmp_stats="$DUMP_FOLDER/memcache-stats"

# Dump a single item
if [ $COMMAND = "item:get" ]
then
  output "Dumping item $EXTRA_ARG"
  if [ $FLAG_MCROUTER -eq 1 ]
  then
    memcache_servers=$mcrouter_server
  fi
  php -r '
    // Split memcache server list
    $servers = explode(" ", $argv[1]);
    foreach ($servers as $server) {
      file_put_contents("php://stderr","-- Item from server $server --" . PHP_EOL);
      list($host, $port) = explode(":", $server);
      $mc = new Memcached;
      $mc->addServer($host, $port);
      $item = $mc->get($argv[2]);
      unset($mc);

      if (!$item) continue;
      print_r($item);
    }
  ' "$memcache_servers" "$EXTRA_ARG"
  exit 0
fi

# Delete a single item
if [ $COMMAND = "item:delete" ]
then
  output "Deleting item $EXTRA_ARG"
  if [ $FLAG_MCROUTER -eq 1 ]
  then
    memcache_servers=$mcrouter_server
  fi
  php -r '
    // Split memcache server list
    $servers = explode(" ", $argv[1]);
    foreach ($servers as $server) {
      file_put_contents("php://stderr","-- Deleting item from server $server --" . PHP_EOL);
      list($host, $port) = explode(":", $server);
      $mc = new Memcached;
      $mc->addServer($host, $port);
      $item = $mc->delete($argv[2]);
      unset($mc);
    }
  ' "$memcache_servers" "$EXTRA_ARG"
  exit 0
fi

if [ "$COMMAND" != "deep-search" -a "$COMMAND" != "report:stats" -a "$COMMAND" != "report:realtime" -a "$COMMAND" != "report:config" ]
then
  if [ $FLAG_REFRESH -eq 1 -o ! -s $tmp_dump ]
  then
    output "Dumping list of all memcache keys to file $tmp_dump"
    rm -f $tmp_dump 2>/dev/null

    for server in $memcache_servers
    do
      memcache_server_split_host_port $server
      output "  ... server $memcache_server_host port $memcache_server_port"
      # Gather data from memcache
      if [ $FLAG_SLAB -eq 0 ]
      then
        for i in {1..42}
        do
          printf "stats cachedump $i 0\nquit\n" | nc $memcache_server_host $memcache_server_port | grep -v "END" | awk '{ print "SLAB='$i' " $0 }' >>$tmp_dump
        done
      else
        printf "stats cachedump $FLAG_SLAB 0\nquit\n" | nc $memcache_server_host $memcache_server_port | grep -v "END" | awk '{ print "SLAB='$FLAG_SLAB' " $0 }' >>$tmp_dump
      fi

    done
    output "  Done."
  else
    output "Using existing key dump $tmp_dump"
  fi
else
  FLAG_NEED_PARSING=0
fi

if [ ! -s $tmp_dump -a $FLAG_NEED_PARSING -eq 1 ]
then
  show_warn "Dumpfile has no data. Perhaps memcache is not running or has no data."
  cleanup
  exit 0
fi

if [ $COMMAND = "deep-search" ]
then
  if [ "${EXTRA_ARG:-.}" = "." ]
  then
    show_error "Need to specify a search string"
    exit 1
  fi
  if [ `echo "${EXTRA_ARG:-.}" |wc -c` -lt 4 ]
  then
    show_error "Search string must be 4 or more characters."
    exit 1
  fi

  output "Ready to search memcache items for..."
  output "    Contents that match: '$EXTRA_ARG'"
  if [ "$ARG_KEY_GREP" != . ]
  then
    output "   Only keys that match: '$ARG_KEY_GREP'"
  fi

  if [ $FLAG_YES -eq 0 ]
  then
    show_warn "** NOTE: THIS OPERATION CAN TAKE A LONG TIME AS IT TRAVERSES ALL THE MEMCACHE ITEMS"
    show_warn "   ARE you sure you want to continue? (ENTER to continue, CTRL-C to quit)"
    read dummy
  fi

  output "Starting to traverse memcache..."

  export FLAG_QUIET
  php -r '
    // Write to stderr
    function verbose($msg) {
      if (getenv("FLAG_QUIET")==0) {
        fwrite(STDERR, "$msg\n");
      }
    }

    $search_string = $argv[2];
    $grep_key_pattern = $argv[3];
    $arg_slab = $argv[4];

    // Escape the regex
    $search_regex = "/" . str_replace("/", "\\/", $search_string) . "/si";

    // Split memcache server list
    $servers = explode(" ", $argv[1]);
    foreach ($servers as $server) {
      list($host, $port) = explode(":", $server);
      $mc = new Memcached;
      $mc->addServer($host, $port);

      $start_slab=0;
      $end_slab=42;
      if ($arg_slab != 0) {
        $start_slab=$arg_slab;
        $end_slab=$arg_slab;
      }

      for ($slab=$start_slab; $slab<=$end_slab; $slab++) {
        $cmd = "printf \"stats cachedump {$slab} 0\nquit\n\" | nc $host $port |grep ^ITEM |grep \"$grep_key_pattern\"";
        $slab_keys = trim(shell_exec($cmd) ?: "");
        if (!$slab_keys)
          continue;

        $items = explode("\n", $slab_keys);
        if (count($items) == 0)
          continue;
        if (empty($items[0]))
          continue;

        if ($grep_key_pattern != ".") {
          verbose("  ... Server $server, Slab $slab: matched " . count($items) . " matching key(s)");
        }

        foreach ($items as $item) {
          // Explode the line into pieces
          $parts = explode(" ", $item);
          // Get item from memcache & store it
          $data = $mc->get($parts[1]);
          if ($data === false) {
            continue;
          }
          $text = print_r($data, true);
          if (preg_match($search_regex, $text) == false) {
            continue;
          }
          echo "MATCH: SERVER=$server SLAB=$slab $item\n";
        }
      }
      unset($mc);
    }
  ' "$memcache_servers" "$EXTRA_ARG" "$ARG_KEY_GREP" "$FLAG_SLAB" | grep --color "$ARG_KEY_GREP"
  exit 0
fi

if [ $COMMAND = "dump:files" ]
then
  output "Dumping memcache contents into files..." >&2
  php -r '
    // Split memcache server list
    $servers = explode(" ", $argv[1]);
    foreach ($servers as $server) {
      list($host, $port) = explode(":", $server);
      $mc = new Memcached;
      $mc->addServer($host, $port);

      $cmd = "grep \"'$ARG_KEY_GREP'\" '$tmp_dump' | awk \"{ print \\$3 }\"";
      $descriptorspec = array(
        0 => array("pipe", "r"),  // stdin
        1 => array("pipe", "w"),  // stdout
        2 => array("pipe", "w")   // stderr
      );

      // Spawn the process
      $process = proc_open($cmd, $descriptorspec, $pipes);
      $dest_dir = "'$DUMP_FOLDER'/content-dump";
      @mkdir($dest_dir);

      if (is_resource($process)) {
          // Close the stdin pipe because we do not need to send any input
          fclose($pipes[0]);

          // Read the stdout line by line
          $num_items = 0;
          while ($line = fgets($pipes[1])) {
              // Process the line
              $line = trim($line);
              $dest_file = "$dest_dir/{$line}";
              // Get item from memcache & store it
              $item = $mc->get($line);
              if ($item !== false) {
                file_put_contents($dest_file, print_r($item, true));
              }

              $num_items++;
              // "Progress-bar"
              if ($num_items%100) {
                echo ".";
              }

          }
          echo PHP_EOL . "$num_items items written to $dest_dir" . PHP_EOL;
          fclose($pipes[1]);  // Close the stdout pipe

          // Optionally, capture stderr output
          $errors = stream_get_contents($pipes[2]);
          fclose($pipes[2]);  // Close the stderr pipe

          $return_value = proc_close($process);

          // Check if there were any errors
          if (!empty($errors)) {
              // Handle errors here
              echo "Error output: " . $errors . PHP_EOL;
          }
      }
      unset($mc);
    }
  ' "$memcache_servers"
  exit 0
fi

if [ $FLAG_NEED_PARSING -eq 1 ]
then
  num_total=`grep -c . $tmp_dump`
  #num_hashed=`egrep -c "ITEM [0-9a-z]{40} " $tmp`

  output "Total memcache items: $num_total"

  parse_dump $tmp_dump >$tmp_parsed
  output "Parsed file is: $tmp_parsed"
fi

# Dump keys
if [ $COMMAND = "dump:keys" ]
then
  header="Slab\tPrefix\tBin\tId\n"
  dumpfile=$tmp_parsed
  if [ $FLAG_RAW -eq 1 ]
  then
    dumpfile=$tmp_dump
    header="Slab\t--\tItem\tSize/Age\n"
  fi

  # Color only if script's output if stdout
  color_arg="--color=always"
  if [ -p /dev/stdout ]; then
    color_arg=""
  fi

  grep="$ARG_KEY_GREP"
  if [ "${grep:-.}" = . -a "${EXTRA_ARG:-x}" != x ]
  then
    grep="$EXTRA_ARG"
  fi

  if [ "$grep" = "." ]
  then
    (printf "$header"; cat $dumpfile) | column -t
  else
    (printf "$header"; egrep $color_arg "$grep" $dumpfile) | column -t
  fi
  exit 0
fi

# Build report
if [ "$COMMAND" = "report:drupal" ]
then

  header "Count by memcache_key_prefix"
  awk '{ print $2 }' $tmp_parsed |sort |uniq -c |sort -nr |head

  header "Count by Bin"
  awk '{ print $3 }' $tmp_parsed |sort |uniq -c |sort -nr |head


  show_crosstab $tmp_parsed 2 3 Prefix Bin
  show_crosstab $tmp_parsed 2 1 Prefix Slab

  # Get prefixes, but sorted by most-to-least frequent
  prefixes=`cat $tmp_parsed |cut -f2 |sort |uniq -c |sort -nr |awk '{print $2 }'`

  for nom in $prefixes
  do

    header "Analysing prefix = $nom";

    # Filter the parsed file just to this bin.
    awk -v prefix="$nom" '($2==prefix) { print }' $tmp_parsed >$tmp_parsed_prefix

    # Crosstab.
    show_crosstab $tmp_parsed_prefix 3 1 Cache_Bins Slab

    # Top Patterns.
    echo "Top patterns observed:"
    (echo "# Cache_bin => Pattern"; echo "---- ---- -- ----"; awk '{ print $3 " => " $4 }' $tmp_parsed_prefix |awk 'length($0) < 300 { print }' | php -r '$result = urldecode(trim(stream_get_contents(STDIN))); print_r($result);' |sed -e 's/\.html_[a-zA-Z0-9_-]\{6,100\}/.html_{hash-value}/g' |sed -e 's/\.html\.twig_[a-zA-Z0-9_-]\{6,100\}/.html.twig_{hash-value}/g' | sed -e 's/[0-9a-f]\{6,100\}/{hex-hash-value}/g' -e 's/:[a-zA-Z0-9_-]*[A-Z][a-zA_Z0-9_-]*/:{hash}/g' | sed -e 's/^views_data:[a-z0-9_]\{2,50\}/views_data:{view-id}/g'  | sed -e 's/^views\.view\.[a-z0-9_]\{2,50\}/views.view.{view-id}/g' |sed -e 's/[0-9][0-9]*/{num}/g' |sort |uniq -c |sort -nr |head -20) |column -t
    echo ""
  done
  cleanup
  exit 0
fi

if [ $COMMAND = "report:config" ]
then
  # Get config
  header "Memcache server configuration"

  for server in $memcache_servers
  do
    memcache_server_split_host_port $server
    echo "-- Server $memcache_server_host port $memcache_server_port"
    printf "stats settings\nquit\n" |nc $memcache_server_host $memcache_server_port
    echo ""
  done

  cleanup
  exit 0
fi

if [ $COMMAND = "report:stats" ]
then

  # Get runtime stats
  header "Runtime statistics"

  for server in $memcache_servers
  do
    memcache_server_split_host_port $server
    echo "-- Server $memcache_server_host port $memcache_server_port"
    printf "stats\nquit\n" |nc $memcache_server_host $memcache_server_port
    echo ""
  done

  # Get slab stats
  header "Slab statistics"

  for server in $memcache_servers
  do
    memcache_server_split_host_port $server
    echo "-- Server $memcache_server_host port $memcache_server_port"

    printf "stats slabs\nquit\n" |nc $memcache_server_host $memcache_server_port |grep "STAT [0-9]" |tr ':' ' ' |egrep "[^_](chunk_size|chunks_per_page|cmd_set|delete_hits|free_chunks|get_hits|mem_requested|total_chunks|total_pages|used_chunks)[^_]" >$tmp_stats
    show_crosstab $tmp_stats 3 2 Stats_slab Slab 4 _ROW_,chunk_size,chunks_per_page
    echo ""
  done

  # More item stats
  header "Item statistics"
  for server in $memcache_servers
  do
    memcache_server_split_host_port $server
    echo "--  Server $memcache_server_host port $memcache_server_port"

    printf "stats items\nquit\n" |nc $memcache_server_host $memcache_server_port |grep "STAT items:[0-9]" |tr ':' ' ' |egrep "[^_]age|evicted|evicted_time|evicted_unfetched|expired_unfetched|number|outofmemory|reclaimed[^_]" >$tmp_stats
    show_crosstab $tmp_stats 4 3 Stats_etc Slab 5 _ROW_,age,number_hot,age_hot,age_warm,evicted_time
    echo ""
  done

  cleanup
  exit 0
fi

if [ $COMMAND = "report:realtime" ]
then
  mcdir=/tmp/mcspy;
  mcscript=$mcdir/memcached-tool-ng
  if [ ! -r $mcscript ]
  then
    mkdir $mcdir 2>/dev/null;
    #curl https://raw.githubusercontent.com/memcached/memcached/master/scripts/memcached-tool -o $mcscript 2>/dev/null;
    curl "https://raw.githubusercontent.com/davidfoliveira/memcached-tool-ng/master/memcached-tool-ng" -o $mcscript 2>/dev/null;
    chmod +x $mcscript;
  fi

  # If we have many servers, ask for only one.
  if [ `echo "$memcache_servers" | grep -c ' '` -gt 0 ]
  then
    show_warn "Multiple servers: using first instance"
    memcache_servers=`echo ${memcache_servers} | cut -f1 -d' '`
  fi

  cmd="$mcscript ${memcache_servers}";

  if [ $FLAG_WATCH -eq 1 ]
  then
    echo "Command: $cmd";
    show_warn "Hit ENTER to start reporting, CTRL-C to break"
    read dummy

    watch -n1 -d --color "$cmd"
  else
    $cmd
  fi
fi